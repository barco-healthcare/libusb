language: c
sudo: required
dist: xenial

os:
  - osx
  - linux

compiler:
  - clang
  - gcc

env:
  global:
    - CTEST_OUTPUT_ON_FAILURE=True

  matrix:
    - BUILD_TYPE=Debug
    - BUILD_TYPE=Release

matrix:
  exclude:
    - os: linux
      compiler: clang
    - os: osx
      compiler: gcc

install:
  # Configure to use our own Debian mirror.
  - if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then sudo apt-add-repository "deb https://${BIN_USER}:${BIN_PASSWORD}@barcohc.jfrog.io/barcohc/AptQt512/ xenial main"; fi
  - if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 10C56D0DE9977759; fi
  - if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then sudo apt-add-repository "deb https://${BIN_USER}:${BIN_PASSWORD}@barcohc.jfrog.io/barcohc/AptUbuntuToolchain/ xenial main"; fi
  - if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1E9377A2BA9EF27F; fi
  - if [[ "${TRAVIS_OS_NAME}" = "linux" ]]; then travis_retry sudo apt-get -qq update; fi
  
  # Update Ruby
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew install ruby
      gem update --system
    fi

  # Install a recent Ninja
  - |
    # Install Ninja
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      travis_retry sudo apt-get -qq install ninja-build
    else
      HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja
    fi

  # Install GCC 6
  - |
    # Install GCC
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      travis_retry sudo apt-get install -qq gcc-6 g++-6
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 90
      sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 90
    fi

  # Use Python 3.7.1
  - |
    # Use Python 3.7.1
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      pyenv global 3.7.1
    fi

  # Install conan
  - |
    # Install conan
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      pip --quiet install conan
    else
      brew install conan
    fi
  - conan remote add barco ${CONAN_URL}
  - conan user -p ${CONAN_API_KEY} -r barco ${CONAN_USER}
  
  # Install buildtools
  - |
    # Install buildtools
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      sudo apt-get -qq install gcovr lcov cppcheck valgrind
    else
      brew install gcovr lcov cppcheck
    fi

before_script:
  - mkdir -p /tmp/build
  - cd /tmp/build
  - cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCODE_COVERAGE=ON -DPRIVATE_TESTS_ENABLED=ON -G Ninja ${TRAVIS_BUILD_DIR}

script:
  - cmake --build . --target all || travis_terminate 1;
  # Linux cannot run tests. It will fail to init libusb because USB Hubs don't exist
  - |
    if [[ "${TRAVIS_OS_NAME}" != "linux" ]]; then
      cmake --build . --target test || travis_terminate 1;
    fi
  - |
    # Create and upload a conan package for barco_1.0.22
    if [ "${TRAVIS_BRANCH}" == "barco_1.0.22" ]; then
      export PROJECT_NAME=`echo $TRAVIS_REPO_SLUG | cut -d / -f2`
      conan create ${TRAVIS_BUILD_DIR} ${PROJECT_NAME}/1.0.22.0@barco/healthcare -s build_type=${BUILD_TYPE}
      conan upload --remote barco --all --force ${PROJECT_NAME}/1.0.22.0@barco/healthcare
    fi
  - |
    # Create and upload a conan package for a release
    if [ -n "$TRAVIS_TAG" ]; then
      export TAG=`echo ${TRAVIS_TAG} | sed "s/[vV]//g"`
      export PROJECT_NAME=`echo $TRAVIS_REPO_SLUG | cut -d / -f2`
      conan create ${TRAVIS_BUILD_DIR} ${PROJECT_NAME}/${TAG}@barco/healthcare -s build_type=${BUILD_TYPE}
      conan upload --remote barco --all ${PROJECT_NAME}/${TAG}@barco/healthcare
    fi

